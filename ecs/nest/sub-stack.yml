AWSTemplateFormatVersion: '2010-09-09'

Description: |
  Create api resources. ALB, ECS Task Definition/Service.

Parameters:
  SysName:
    Type: String
    Description: System name
  EnvName:
    Type: String
    Description: prd, reg, stg, dev, ...

  # Network
  VpcIdMain:
    Description: VPC ID for ECS
    Type: String

  # ALB
  SecurityGroupAlbApi:
    Type: String
    Description: SecurityGroup for ALB API
  SubnetIdsForAlb:
    Description: Subnet IDs for ALB(Comma delimited list)
    Type: String

  # ECS
  SecurityGroupIdsOfEcsApi:
    Description: SecurityGroup IDs of ECS API(Comma delimited list)
    Type: String
  SubnetIdsForEcsApi:
    Description: Subnet IDs for ECS(Comma delimited list)
    Type: String
  EcsCpuApi:
    Type: Number
    Description: CPU for ECS API
    Default: 512
  EcsMemoryApi:
    Type: Number
    Description: Memory size for ECS API
    Default: 256
  EcsDesiredCountApi:
    Type: Number
    Description: Task disired count of ECS
    Default: 1
  EcsPortApi:
    Type: Number
    Description: ECS port of ECS
    Default: 8080


Resources:
  ##########################################################################################
  # ALB
  ##########################################################################################
  # ALB API
  AlbApi:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub ${SysName}-${EnvName}-alb-api
      Type: application
      Scheme: internal
      #Scheme: internet-facing
      SecurityGroups: !Split [ ",", !Ref SecurityGroupAlbApi ]
      Subnets: !Split [ ",", !Ref SubnetIdsForAlb ]
      LoadBalancerAttributes:
        # - Key: access_logs.s3.enabled
        #   Value: true
        # - Key: access_logs.s3.bucket
        #   Value: !Sub ${S3BucketAwsLogs}
        # - Key: access_logs.s3.prefix
        #   Value: !Sub alb/${SysName}-${EnvName}-alb-api
        - Key: idle_timeout.timeout_seconds
          Value: 180
        - Key: deletion_protection.enabled
          Value: false
        - Key: routing.http2.enabled
          Value: true
        - Key: routing.http.drop_invalid_header_fields.enabled
          Value: false
        - Key: routing.http.xff_client_port.enabled
          Value: false
        - Key: routing.http.preserve_host_header.enabled
          Value: false
        - Key: routing.http.xff_header_processing.mode
          Value: append
        - Key: load_balancing.cross_zone.enabled
          Value: true
        - Key: routing.http.desync_mitigation_mode
          Value: defensive
        # - Key: waf.fail_open.enabled
        #   Value: false
        - Key: routing.http.x_amzn_tls_version_and_cipher_suite.enabled
          Value: false
      Tags:
        - Key: Name
          Value: !Sub ${SysName}-${EnvName}-alb-api

  # ALB TargetGroup API
  AlbTargetGroupApi:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      VpcId: !Ref VpcIdMain
      TargetType: ip
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2
      HealthCheckTimeoutSeconds: 2
      HealthCheckIntervalSeconds: 5
      HealthCheckPath: /health
      HealthCheckPort: traffic-port
      HealthCheckProtocol: HTTP
      Matcher:
        HttpCode: '200'
      Name: !Sub ${SysName}-${EnvName}-albtg-api
      Port: !Ref EcsPortApi
      Protocol: HTTP
      TargetGroupAttributes:
        - Key: 'stickiness.enabled'
          Value: 'false'
        - Key: 'deregistration_delay.timeout_seconds'
          Value: '300'
        - Key: 'stickiness.type'
          Value: 'lb_cookie'
        - Key: 'stickiness.lb_cookie.duration_seconds'
          Value: '86400'
        - Key: 'slow_start.duration_seconds'
          Value: '0'
        - Key: 'load_balancing.algorithm.type'
          Value: 'round_robin'
      Tags:
        - Key: Name
          Value: !Sub ${SysName}-${EnvName}-albtg-api

  # ALB Listener
  AlbListenerAlbApi:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref AlbApi
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          Order: 1
          TargetGroupArn: !Ref AlbTargetGroupApi

  ##########################################################################################
  # ECS
  ##########################################################################################
  # LogGroup for ECS Task API
  LogGroupEcsApi:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /ecs/logs/ecs-test-log
      RetentionInDays: 7

  # ECS Task Definition API
  EcsTaskDefApi:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub ${SysName}-${EnvName}-ecstaskdef-api
      Cpu: 256
      Memory: 512
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ContainerDefinitions:
        - DockerLabels:
            Name: !Sub ${SysName}-${EnvName}-ecs-api
          Name: !Sub ${SysName}-${EnvName}-container-api
          Essential: true
          Image: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${SysName}-${EnvName}-images:latest
          LogConfiguration:
            LogDriver: awslogs
            Options:
                awslogs-group: !Sub ${LogGroupEcsApi}
                awslogs-region: !Sub ${AWS::Region}
                awslogs-stream-prefix: !Sub ${SysName}-${EnvName}-
          PortMappings:
            - ContainerPort: !Ref EcsPortApi
              HostPort: !Ref EcsPortApi
              Protocol: tcp
          Environment:
            - Name: VERSION
              Value: !Sub '{{resolve:ssm:/ecs/dev/version}}'
      RuntimePlatform:
        OperatingSystemFamily: LINUX
      TaskRoleArn:
        Fn::ImportValue: 
          !Sub '${SysName}-${EnvName}-ecs-task-role-arn'
      ExecutionRoleArn:
        Fn::ImportValue:
          !Sub '${SysName}-${EnvName}-ecs-task-execution-role-arn'

  # ECS Service API
  EcsServiceApi:
    Type: AWS::ECS::Service
    DependsOn:
      - EcsTaskDefApi
      - AlbListenerAlbApi
    Properties:
      ServiceName: !Sub ${SysName}-${EnvName}-ecssv-api
      Cluster:
        Fn::ImportValue:
          !Sub '${SysName}-${EnvName}-ecs-cluster-arn'
      DesiredCount: !Sub ${EcsDesiredCountApi}
      LaunchType: FARGATE
      TaskDefinition: !Sub ${EcsTaskDefApi}
      LoadBalancers:
        - TargetGroupArn: !Ref AlbTargetGroupApi
          ContainerName: !Sub ${SysName}-${EnvName}-container-api
          ContainerPort: !Ref EcsPortApi
      DeploymentConfiguration:
          MaximumPercent: 200
          MinimumHealthyPercent: 100
      # Role: !Sub ${EcsServiceRoleArn}
      # HealthCheckGracePeriodSeconds: 0
      SchedulingStrategy: REPLICA
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups: !Split [ ",", !Ref SecurityGroupIdsOfEcsApi ]
          Subnets: !Split [ ",", !Ref SubnetIdsForEcsApi ]

  # ScalableTarget ECS API
  ScalableTargetEcsApi:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MaxCapacity: 5
      MinCapacity: 1
      ResourceId: !Sub service/ecs-dev-cluster/${EcsServiceApi.Name}
      RoleARN: !Sub arn:aws:iam::${AWS::AccountId}:role/aws-service-role/ecs.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_ECSService
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs

  # ScalingPolicy ECS API by CPU
  ScalingPolicyEcsApiCpu:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: !Sub ${SysName}-${EnvName}-scalingpolicy-ecs-api-cpu
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref ScalableTargetEcsApi
      TargetTrackingScalingPolicyConfiguration:
        TargetValue: 70.0
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization
        ScaleInCooldown: 600
        ScaleOutCooldown: 600

  # ScalingPolicy ECS API by Memory
  ScalingPolicyEcsApiMemory:
    Type: 'AWS::ApplicationAutoScaling::ScalingPolicy'
    Properties:
      PolicyName: !Sub ${SysName}-${EnvName}-scalingpolicy-ecs-api-memory
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref ScalableTargetEcsApi
      TargetTrackingScalingPolicyConfiguration:
        TargetValue: 70.0
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageMemoryUtilization
        ScaleInCooldown: 600
        ScaleOutCooldown: 600
