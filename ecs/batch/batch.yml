AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::LanguageExtensions'
Description: |
  Create EventBridge Scheduler, Pipe, and so on

Parameters:
  SysName:
    Type: String
    Default: test
    Description: System name
  EnvName:
    Type: String
    Default: dev
    Description: prd, reg, stg, dev, ...

  # ECS
  SecurityGroupIdsOfEcsApi:
    Description: SecurityGroup IDs of ECS(Comma delimited list)
    Type: String
  SubnetIdsForEcsApi:
    Description: Subnet IDs for ECS(Comma delimited list)
    Type: String

Resources:
  # IAM
  PipeRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Fn::ToJsonString:
          Version: 2012-10-17
          Statement:
            - Effect: Allow
              Principal:
                Service: pipes.amazonaws.com
              Action: sts:AssumeRole
              Condition:
                StringEquals:
                  aws:SourceAccount: !Ref AWS::AccountId
                ArnLike:
                  aws:SourceArn: !Sub arn:aws:pipes:${AWS::Region}:${AWS::AccountId}:pipe/*
      Policies:
        - PolicyName: "EcsPipeTarget"
          PolicyDocument:
            Fn::ToJsonString:
              Version: 2012-10-17
              Statement:
                - Effect: Allow
                  Action: ecs:RunTask
                  Resource:
                    - !Ref EcsTaskDefBatch
                - Effect: Allow
                  Action: ecs:TagResource
                  Resource:
                    - !Sub arn:aws:ecs:${AWS::Region}:${AWS::AccountId}:task/ecs-dev-cluster/*
                - Effect: Allow
                  Action: iam:PassRole
                  Resource: '*'
                  Condition:
                    StringLike:
                     iam:PassedToService: ecs-tasks.amazonaws.com
        - PolicyName: "SqsPipeTarget"
          PolicyDocument:
            Fn::ToJsonString:
              Version: 2012-10-17
              Statement:
                - Effect: Allow
                  Action:
                    - sqs:ReceiveMessage
                    - sqs:DeleteMessage
                    - sqs:GetQueueAttributes
                  Resource:
                    - !GetAtt Sqs.Arn
      RoleName: !Sub ${SysName}-${EnvName}-pipe-role
      Tags:
        - Key: Name
          Value: !Sub ${SysName}-${EnvName}-batch

  # LogGroup for ECS Task Batch
  LogGroupEcsBatch:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/ecs/${SysName}-${EnvName}-batch
      RetentionInDays: 7

  # ECS Task Definition Batch
  EcsTaskDefBatch:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub ${SysName}-${EnvName}-ecstaskdef-batch
      ContainerDefinitions:
        - Name: !Sub ${SysName}-${EnvName}-batch
          Essential: true
          Image: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${SysName}-${EnvName}-images:batch
          LogConfiguration:
            LogDriver: awslogs
            Options:
                awslogs-group: !Sub ${LogGroupEcsBatch}
                awslogs-region: !Sub ${AWS::Region}
                awslogs-stream-prefix: batch
      RuntimePlatform:
        OperatingSystemFamily: LINUX
      TaskRoleArn:
        Fn::ImportValue: 
          !Sub '${SysName}-${EnvName}-ecs-task-role-arn'
      ExecutionRoleArn:
        Fn::ImportValue:
          !Sub '${SysName}-${EnvName}-ecs-task-execution-role-arn'
      RequiresCompatibilities:
        - FARGATE
      NetworkMode: awsvpc
      Cpu: '256'
      Memory: '512'

  # SQS
  Sqs:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub ${SysName}-${EnvName}-sqs.fifo
      ContentBasedDeduplication: true
      DelaySeconds: 0
      FifoQueue: true
      MaximumMessageSize: 262144
      MessageRetentionPeriod: 604800
      ReceiveMessageWaitTimeSeconds: 0
      SqsManagedSseEnabled: false
      VisibilityTimeout: 720

  # LogGroup for EventBridge Pipe
  LogGroupEventBridgePipe:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/ebpipe/${SysName}-${EnvName}-ebpipe
      RetentionInDays: 7

  # EventBridge Pipe
  EventBridgePipe:
    Type: AWS::Pipes::Pipe
    Properties:
      Name: !Sub ${SysName}-${EnvName}-ebpipe
      Description: Run Batch task
      DesiredState: RUNNING
      LogConfiguration:
        CloudwatchLogsLogDestination:
          LogGroupArn: !Sub ${LogGroupEventBridgePipe.Arn}
        Level: TRACE
        # IncludeExecutionData: ALL
      RoleArn: !GetAtt PipeRole.Arn
      Source: !GetAtt Sqs.Arn
      SourceParameters:
        SqsQueueParameters:
          BatchSize: 1
      Tags:
        Name: !Sub ${SysName}-${EnvName}-ebpipe
      Target:
        Fn::ImportValue:
          !Sub '${SysName}-${EnvName}-ecs-cluster-arn'
      TargetParameters:
        EcsTaskParameters:
          EnableECSManagedTags: true
          EnableExecuteCommand: false
          LaunchType: FARGATE
          NetworkConfiguration:
            AwsvpcConfiguration:
              AssignPublicIp: DISABLED
              SecurityGroups: !Split [ ',', !Ref SecurityGroupIdsOfEcsApi]
              Subnets: !Split [ ',', !Ref SubnetIdsForEcsApi]
          Overrides:
            ContainerOverrides:
              - Name: !Sub ${SysName}-${EnvName}-batch
                Command:
                  - '/app/app.py'
                Environment:
                  - Name: VERSION
                    Value: !Sub '{{resolve:ssm:/ecs/dev/version}}'
          PlatformVersion: LATEST
          PropagateTags: TASK_DEFINITION
          Tags:
            - Key: Name
              Value: !Sub ${SysName}-${EnvName}-ecstask
          TaskCount: 1
          TaskDefinitionArn: !Ref EcsTaskDefBatch
